import{a as J,b as X}from"../chunk-KQ72COCA.mjs";import"../chunk-ANZKOZEE.mjs";import{a as tt,b as et,e as at}from"../chunk-I23NYDZX.mjs";import{a as N,b as W,g as Z,h as Q,i as O,j as F}from"../chunk-IBNRZ227.mjs";import"../chunk-ZGEJ7KGT.mjs";import"../chunk-K7C7TUE5.mjs";import{TypedEmitter as ht}from"tiny-typed-emitter";import{TypedEmitter as ct}from"tiny-typed-emitter";var z=class{ip;zoneSyncStatus=0;cache=new Map;constructor(a,s,r){}updatePlayerStats(a){a.forEach(s=>{let r=this.cache.get(s.name);r?(r.info=s,r.status=2):this.cache.set(s.name,{hash:"",status:2,info:s})})}getStats(a){if(!this.isCurrentZoneValid())return;let s=this.cache.get(a);if(s&&s.status===2)return s.info.stats}isCurrentZoneValid(){return this.zoneSyncStatus!==0&&(this.zoneSyncStatus&10)===0}};var ft={isLive:!0,dontResetOnZoneChange:!1,resetAfterPhaseTransition:!1,splitOnPhaseTransition:!1,broadcastInterval:100},q=class extends ct{#t;encounters;#s;#o;#r;#e;options;resetTimer;#a=!1;phaseTransitionResetRequest;phaseTransitionResetRequestTime;#i;constructor(a,s,r,i,e){super(),this.#s=a,this.#o=s,this.#r=r,this.#e=i,this.options={...ft,...e},this.resetTimer=null,this.phaseTransitionResetRequest=!1,this.phaseTransitionResetRequestTime=0,this.#i=new Map,this.encounters=[],this.#t={startedOn:0,lastCombatPacket:0,fightStartedOn:0,localPlayer:this.#s.localPlayer.name,currentBoss:void 0,killState:0,zoneLevel:F[0],entities:new Map,damageStatistics:{totalDamageDealt:0,topDamageDealt:0,totalDamageTaken:0,topDamageTaken:0,totalHealingDone:0,topHealingDone:0,totalShieldDone:0,topShieldDone:0,debuffs:new Map,buffs:new Map,topShieldGotten:0,totalEffectiveShieldingDone:0,topEffectiveShieldingDone:0,topEffectiveShieldingUsed:0,effectiveShieldingBuffs:new Map,appliedShieldingBuffs:new Map}}}onCounterAttack(a,s){let r=this.updateEntity(a,{},s);r.hits.counter+=1}onInitEnv(a,s){this.options.isLive?(this.#t.entities.forEach((r,i,e)=>{r.hits.total===0&&e.delete(i)}),this.options.dontResetOnZoneChange===!1&&this.resetTimer===null&&(this.resetTimer=setTimeout(()=>{this.resetState(+s+6e3)},6e3),this.emit("message","new-zone"))):(this.splitEncounter(s),this.emit("message","new-zone"))}splitEncounter(a){if(this.#t.fightStartedOn!==0&&(this.#t.damageStatistics.totalDamageDealt!==0||this.#t.damageStatistics.totalDamageTaken!==0)){let s=this.#t,r=this.#s.localPlayer.name;this.resetState(+a),s.entities.forEach(i=>{i.isPlayer&&(i.statApiValid=this.#r.isCurrentZoneValid()&&this.#r.cache.get(i.name)?.status===2)}),s.localPlayer=r,this.applyBreakdowns(s.entities),this.encounters.push(s)}}getBossIfStillExist(){if(this.#t.currentBoss?.id){let a=BigInt(`0x0${this.#t.currentBoss?.id}`);return this.#s.entities.has(a)?this.#t.currentBoss:void 0}}resetState(a,s=!0){this.#a=!1,this.cancelReset(),this.resetBreakdowns(),this.#t={startedOn:+a,lastCombatPacket:+a,fightStartedOn:0,localPlayer:this.#s.localPlayer.name,currentBoss:this.getBossIfStillExist(),entities:new Map,killState:0,zoneLevel:this.#t.zoneLevel,damageStatistics:{totalDamageDealt:0,topDamageDealt:0,totalDamageTaken:0,topDamageTaken:0,totalHealingDone:0,topHealingDone:0,totalShieldDone:0,topShieldDone:0,debuffs:new Map,buffs:new Map,appliedShieldingBuffs:new Map,effectiveShieldingBuffs:new Map,topEffectiveShieldingDone:0,topEffectiveShieldingUsed:0,topShieldGotten:0,totalEffectiveShieldingDone:0}},s&&this.emit("reset-state",this.#t)}cancelReset(){this.resetTimer&&clearTimeout(this.resetTimer),this.resetTimer=null}onPhaseTransition(a,s){this.options.isLive&&(this.emit("message",`phase-transition-${a}`),this.options.resetAfterPhaseTransition&&(this.phaseTransitionResetRequest=!0,this.phaseTransitionResetRequestTime=+s)),!this.options.isLive&&this.options.splitOnPhaseTransition&&this.splitEncounter(s)}updateOptions(a){this.options={...this.options,...a}}onDeath(a,s){let r=this.#t.entities.get(a.name),i=0;r?r.isDead?i=r.deaths:i=r.deaths+1:i=1,this.updateEntity(a,{isDead:!0,deathTime:+s,deaths:i},s)}onDamage(a,s,r,i,e,t){if((i.modifier&15)===11&&i.skillId===0&&i.skillEffectId===0)return;this.phaseTransitionResetRequest&&this.phaseTransitionResetRequestTime>0&&this.phaseTransitionResetRequestTime<+t-8e3&&(this.resetState(+t),this.phaseTransitionResetRequest=!1);let[o,f]=this.#o.getStatusEffects(a,r,this.#s.localPlayer.characterId,t);if(this.#e.isBattleItem(i.skillEffectId,"attack")&&s&&s.entityType===5){let D=s;i.skillEffectId=D.skillEffectId}let l=this.updateEntity(a,{},t),I=this.updateEntity(r,{currentHp:i.targetCurHp,maxHp:i.targetMaxHp},t);if(!l||!I)return;!I.isPlayer&&i.targetCurHp<0&&(i.damage=i.damage+i.targetCurHp);let R=i.skillId;i.skillId===0&&i.skillEffectId!==0&&(R=i.skillEffectId);let y=l.skills.get(R);y||(y={...this.createEntitySkill(),id:R,...this.getSkillNameIcon(i.skillId,i.skillEffectId)},l.skills.set(R,y));let x=i.modifier&15,B=(i.modifier>>4&7)-1,w=(x&9)!==0,_=new Set,v=new Set;o.forEach(([D])=>{_.add(D)}),f.forEach(([D])=>{v.add(D)}),y.damageInfo.damageDealt+=i.damage,i.damage>y.maxDamage&&(y.maxDamage=i.damage),l.hits.total+=1,y.hits.total+=1,l.damageInfo.damageDealt+=i.damage,I.damageTaken+=i.damage;let H=w?1:0;l.hits.crit+=H,y.hits.crit+=H;let j=!1,G=!1,V=this.#e.getSkillEffectDirectionalMask(i.skillEffectId)-1;if(V===0||V===2){G=B===0;let D=G?1:0;l.hits.backAttack+=D,l.hits.totalBackAttack+=1,y.hits.backAttack+=D,y.hits.totalBackAttack+=1}if(V===1||V===2){j=B===1;let D=j?1:0;l.hits.frontAttack+=D,l.hits.totalFrontAttack+=1,y.hits.frontAttack+=D,y.hits.totalFrontAttack+=1}if(l.isPlayer){this.#t.damageStatistics.totalDamageDealt+=i.damage,this.#t.damageStatistics.topDamageDealt=Math.max(this.#t.damageStatistics.topDamageDealt,l.damageInfo.damageDealt);let D=!1,M=!1;_.forEach(n=>{if(!this.#t.damageStatistics.buffs.has(n)){let g=this.#e.getStatusEffectHeaderData(n);g&&this.#t.damageStatistics.buffs.set(n,g)}let b=this.#t.damageStatistics.buffs.get(n);b&&!D&&(D=(b.buffcategory==="classskill"||b.buffcategory==="identity"||b.buffcategory==="ability")&&b.source.skill!==void 0&&b.target===1&&this.#e.isSupportClassId(b.source.skill.classid));let T=y.damageDealtBuffedBy.get(n)??0;y.damageDealtBuffedBy.set(n,T+i.damage);let C=l.damageDealtBuffedBy.get(n)??0;l.damageDealtBuffedBy.set(n,C+i.damage);let L=l.hits.hitsBuffedBy.get(n)??0;l.hits.hitsBuffedBy.set(n,L+1);let k=y.hits.hitsBuffedBy.get(n)??0;y.hits.hitsBuffedBy.set(n,k+1)}),v.forEach(n=>{if(!this.#t.damageStatistics.debuffs.has(n)){let g=this.#e.getStatusEffectHeaderData(n);g&&this.#t.damageStatistics.debuffs.set(n,g)}let b=this.#t.damageStatistics.debuffs.get(n);b&&!M&&(M=(b.buffcategory==="classskill"||b.buffcategory==="identity"||b.buffcategory==="ability")&&b.source.skill!==void 0&&b.target===1&&this.#e.isSupportClassId(b.source.skill.classid));let T=y.damageDealtDebuffedBy.get(n)??0;y.damageDealtDebuffedBy.set(n,T+i.damage);let C=l.damageDealtDebuffedBy.get(n)??0;l.damageDealtDebuffedBy.set(n,C+i.damage);let L=l.hits.hitsDebuffedBy.get(n)??0;l.hits.hitsDebuffedBy.set(n,L+1);let k=y.hits.hitsDebuffedBy.get(n)??0;y.hits.hitsDebuffedBy.set(n,k+1)});let Y=M?1:0,$=D?1:0;if(y.damageInfo.damageDealtBuffedBySupport+=D?i.damage:0,y.damageInfo.damageDealtDebuffedBySupport+=M?i.damage:0,l.damageInfo.damageDealtBuffedBySupport+=D?i.damage:0,l.damageInfo.damageDealtDebuffedBySupport+=M?i.damage:0,l.hits.hitsBuffedBySupport+=$,l.hits.hitsDebuffedBySupport+=Y,y.hits.hitsBuffedBySupport+=$,y.hits.hitsDebuffedBySupport+=Y,i.damage>0&&l.isPlayer){let n={multDmg:{sumRate:0,totalRate:1,values:Array()},atkPowSubRate2:{selfSumRate:0,sumRate:0,values:Array()},atkPowSubRate1:{sumRate:0,totalRate:1,values:Array()},skillDamRate:{selfSumRate:0,sumRate:0,values:Array()},atkPowAmplify:{values:Array()},crit:{selfSumRate:0,sumRate:0,values:Array()},critDmgRate:2};if(o.forEach(([k,g,E])=>{let m=this.#s.entities.get(g);if(!m)return;let c=this.getBuffAfterTripods(this.#e.skillBuff.get(k),m,i);if(c){if(c.type==="skill_damage_amplify"&&c.statuseffectvalues&&m.entityType===1&&g!==a.entityId){let u=c.statuseffectvalues[0]??0,d=c.statuseffectvalues[4]??0;if((u===0||u===i.skillId)&&(d===0||d===i.skillEffectId)){let h=c.statuseffectvalues[1]??0;if(h!==0){let p=h/1e4*E;n.multDmg.values.push({casterEntity:m,rate:p}),n.multDmg.sumRate+=p,n.multDmg.totalRate*=1+p}}}else if(c.type==="attack_power_amplify"&&c.statuseffectvalues&&m.entityType===1&&g!==a.entityId){let u=c.statuseffectvalues[0]??0;if(u!==0){let d=u/1e4*E,h=this.#r.getStats(m.name)?.find(P=>P.id===4)?.value,p=this.#r.getStats(a.name)?.find(P=>P.id===4)?.value;h&&p&&(d*=h/p),n.atkPowAmplify.values.push({casterEntity:m,rate:d})}}c.passiveoption.forEach(u=>{if(N[u.type]===2){if(u.keystat==="attack_power_sub_rate_2"){let d=u.value;if(d!==0){let h=d/1e4*E;m.entityType===1&&g!==a.entityId?(n.atkPowSubRate2.values.push({casterEntity:m,rate:h}),n.atkPowSubRate2.sumRate+=h):n.atkPowSubRate2.selfSumRate+=h}}else if(u.keystat==="attack_power_sub_rate_1"){let d=u.value;if(d!==0){let h=d/1e4*E;m.entityType===1&&g!==a.entityId&&(n.atkPowSubRate1.values.push({casterEntity:m,rate:h}),n.atkPowSubRate1.sumRate+=h,n.atkPowSubRate1.totalRate*=1+h)}}else if(u.keystat==="skill_damage_rate"){let d=u.value;if(d!==0){let h=d/1e4*E;m.entityType===1&&g!==a.entityId?(n.skillDamRate.values.push({casterEntity:m,rate:h}),n.skillDamRate.sumRate+=h):n.skillDamRate.selfSumRate+=h}}}if(u.keystat==="critical_hit_rate"){let d=u.value;if(d!==0){let h=d/1e4*E;m.entityType===1&&g!==a.entityId?(n.crit.values.push({casterEntity:m,rate:h}),n.crit.sumRate+=h):n.crit.selfSumRate+=h}}if(m.entityType===1&&g!==a.entityId)if(u.keystat==="skill_damage_sub_rate_2"){let d=u.value;if(d!==0){let h=d/1e4*E,p=this.#r.getStats(m.name)?.find(P=>P.id===1)?.value??0;switch(m.class){case 204:h*=1+p/.0699*.35/1e4;break;case 105:h*=1+p/.0699*.63/1e4;break;case 602:h*=1+p/.0699*.38/1e4;break;default:break}n.multDmg.values.push({casterEntity:m,rate:h}),n.multDmg.sumRate+=h,n.multDmg.totalRate*=1+h}}else u.keystat==="critical_dam_rate"&&c.category==="buff"&&(n.critDmgRate+=u.value/1e4*E);else if(N[u.type]===4){let d=this.#e.combatEffect.get(u.keyindex);n.critDmgRate+=E*this.getCritMultiplierFromCombatEffect(d,{self:a,target:r,caster:m,skill:this.#e.skill.get(R),hitOption:B,targetCount:e})}})}}),f.forEach(([k,g,E])=>{let m=this.#s.entities.get(g);if(!m)return;let c=this.getBuffAfterTripods(this.#e.skillBuff.get(k),m,i);if(c){if(c.type==="instant_stat_amplify"&&c.statuseffectvalues){let u=c.statuseffectvalues[0]??0;if(u!==0){let d=u/1e4*E;m.entityType===1&&g!==a.entityId?(n.crit.values.push({casterEntity:m,rate:d}),n.crit.sumRate+=d):n.crit.selfSumRate+=d}}if(!(m.entityType!==1||g===a.entityId)){if(c.type==="instant_stat_amplify"&&c.statuseffectvalues){let u=c.statuseffectvalues[0]??0;if(i.damageType===0){let d=c.statuseffectvalues[2]??0;if(d!==0){let p=-(d/1e4)*E*.5;n.multDmg.values.push({casterEntity:m,rate:p}),n.multDmg.sumRate+=p,n.multDmg.totalRate*=1+p}let h=c.statuseffectvalues[7]??0;if(h!==0){let p=h/1e4*E;n.multDmg.values.push({casterEntity:m,rate:p}),n.multDmg.sumRate+=p,n.multDmg.totalRate*=1+p}if(w){let p=c.statuseffectvalues[9]??0;if(p!==0){let P=p/1e4*E;n.multDmg.values.push({casterEntity:m,rate:P}),n.multDmg.sumRate+=P,n.multDmg.totalRate*=1+P}}}else if(i.damageType===1){let d=c.statuseffectvalues[3]??0;if(d!==0){let p=-(d/1e4)*E*.5;n.multDmg.values.push({casterEntity:m,rate:p}),n.multDmg.sumRate+=p,n.multDmg.totalRate*=1+p}let h=c.statuseffectvalues[8]??0;if(h!==0){let p=h/1e4*E;n.multDmg.values.push({casterEntity:m,rate:p}),n.multDmg.sumRate+=p,n.multDmg.totalRate*=1+p}if(w){let p=c.statuseffectvalues[10]??0;if(p!==0){let P=p/1e4*E;n.multDmg.values.push({casterEntity:m,rate:P}),n.multDmg.sumRate+=P,n.multDmg.totalRate*=1+P}}}}if(c.type==="skill_damage_amplify"&&c.statuseffectvalues){let u=c.statuseffectvalues[0]??0,d=c.statuseffectvalues[4]??0;if((u===0||u===i.skillId)&&(d===0||d===i.skillEffectId)){let h=c.statuseffectvalues[1]??0;if(h!==0){let p=h/1e4*E;n.multDmg.values.push({casterEntity:m,rate:p}),n.multDmg.sumRate+=p,n.multDmg.totalRate*=1+p}}}if(c.type==="directional_attack_amplify"&&c.statuseffectvalues){if(j){let u=c.statuseffectvalues[0]??0;if(u!==0){let d=u/100*E;n.multDmg.values.push({casterEntity:m,rate:d}),n.multDmg.sumRate+=d,n.multDmg.totalRate*=1+d}}if(G){let u=c.statuseffectvalues[4]??0;if(u!==0){let d=u/100*E;n.multDmg.values.push({casterEntity:m,rate:d}),n.multDmg.sumRate+=d,n.multDmg.totalRate*=1+d}}}}}}),n.crit.values.length>0){let k=this.#e.skill.get(i.skillId);a.itemSet?.forEach(g=>{if(N[g.type]===2&&O[g.keystat]===76)n.critDmgRate+=g.value/1e4;else if(N[g.type]===4){let E=this.#e.combatEffect.get(g.keyindex);n.critDmgRate+=this.getCritMultiplierFromCombatEffect(E,{self:a,target:r,caster:a,skill:k,hitOption:B,targetCount:e})}a.skills.get(i.skillId)?.tripods.forEach(E=>{let m=new Map;E.options.forEach(c=>{let u=Q[c.type];if(u===45){if((c.params[0]??0)===0||i.skillEffectId===(c.params[0]??0)){let d=c.params[1];if(d){let h=this.#e.combatEffect.get(d);h&&m.set(h.id,h)}}}else if(u===46)m.delete(c.params[0]??0);else if(u===104){if((c.params[0]??0)===0||i.skillEffectId===(c.params[0]??0)){let d=m.get(c.params[1]??0);if(d){let h=ut(d);m.set(d.id,h),h.effects.forEach(p=>{p.actions.forEach(P=>{for(let A=0;A<c.params.length-2;A++)Z[c.paramtype]===1?P.args[A]*=1+(c.params[A+2]??0)/100:P.args[A]+=c.params[A+2]??0})})}}}else u===29?((c.params[0]??0)===0||i.skillEffectId===(c.params[0]??0))&&(n.critDmgRate+=(c.params[1]??0)/1e4):u===30&&((c.params[0]??0)===0||i.skillEffectId===(c.params[0]??0))&&(n.crit.selfSumRate+=(c.params[1]??0)/1e4)}),m.forEach(c=>{n.critDmgRate+=this.getCritMultiplierFromCombatEffect(c,{self:a,target:r,caster:a,skill:k,hitOption:B,targetCount:e})})})})}if(n.skillDamRate.values.length>0){let k=this.#r.getStats(a.name)?.find(g=>g.id===5)?.value;k&&(n.skillDamRate.selfSumRate+=k/1e4)}let b=0;if(n.crit.values.length>0){n.crit.selfSumRate+=(this.#r.getStats(a.name)?.find(g=>g.id===0)?.value??0)/.2794/1e4;let k=Math.min(Math.max(0,1-n.crit.selfSumRate),n.crit.sumRate);b=(k*n.critDmgRate-k)/(n.crit.selfSumRate*n.critDmgRate-n.crit.selfSumRate+1)}let T=n.atkPowAmplify.values.length<=0?{rate:0}:n.atkPowAmplify.values.reduce((k,g)=>k.rate>g.rate?k:g),C=(1+b)*(1+n.atkPowSubRate2.sumRate/(1+n.atkPowSubRate2.selfSumRate))*(1+n.skillDamRate.sumRate/(1+n.skillDamRate.selfSumRate))*(1+T.rate)*n.multDmg.totalRate*n.atkPowSubRate1.totalRate-1,L=b+n.atkPowSubRate2.sumRate/(1+n.atkPowSubRate2.selfSumRate)+n.skillDamRate.sumRate/(1+n.skillDamRate.selfSumRate)+T.rate+(n.multDmg.totalRate-1)+(n.atkPowSubRate1.totalRate-1);{let k=C*i.damage/(L*(1+C)),g=b*k/n.crit.sumRate;n.crit.values.forEach(c=>{let u=c.rate*g,d=this.#t.entities.get(c.casterEntity.name);this.applyRdps(l,d,y,u)}),n.atkPowSubRate2.values.forEach(c=>{let u=c.rate/(1+n.atkPowSubRate2.selfSumRate)*k,d=this.#t.entities.get(c.casterEntity.name);this.applyRdps(l,d,y,u)}),n.skillDamRate.values.forEach(c=>{let u=c.rate/(1+n.skillDamRate.selfSumRate)*k,d=this.#t.entities.get(c.casterEntity.name);this.applyRdps(l,d,y,u)});let E=(n.multDmg.totalRate-1)*k/n.multDmg.sumRate;n.multDmg.values.forEach(c=>{let u=c.rate*E,d=this.#t.entities.get(c.casterEntity.name);this.applyRdps(l,d,y,u)});let m=(n.atkPowSubRate1.totalRate-1)*k/n.atkPowSubRate1.sumRate;if(n.atkPowSubRate1.values.forEach(c=>{let u=c.rate*m,d=this.#t.entities.get(c.casterEntity.name);this.applyRdps(l,d,y,u)}),T.rate>0){let c=T.rate*k,u=this.#t.entities.get(T.casterEntity?.name);this.applyRdps(l,u,y,c)}}}let nt={timestamp:+t,damage:i.damage,targetEntity:I.id,isCrit:w,isBackAttack:G,isFrontAttack:j,isBuffedBySupport:D,isDebuffedBySupport:M,buffedBy:[..._],debuffedBy:[...v]},ot=BigInt("0x"+l.id);this.addBreakdown(ot,R,nt)}I.isPlayer&&(this.#t.damageStatistics.totalDamageTaken+=i.damage,this.#t.damageStatistics.topDamageTaken=Math.max(this.#t.damageStatistics.topDamageTaken,I.damageTaken)),I.isBoss&&(this.#t.currentBoss=I),this.#t.fightStartedOn===0&&(this.#t.fightStartedOn=+t),this.#t.lastCombatPacket=+t}getBuffAfterTripods(a,s,r){if(!a||s.entityType!==1)return a;let i=dt(a);return s.skills.get(r.skillId)?.tripods.forEach(e=>{e.options.forEach(t=>{let o=Q[t.type];if(o===19){if(((t.params[0]??0)===0||r.skillEffectId===(t.params[0]??0))&&i.id===(t.params[1]??0)){let f=new Map;for(let l=2;l<t.params.length;l+=2)t.params[l]&&t.params[l+1]&&f.set(t.params[l]??0,t.params[l+1]??0);i.passiveoption.forEach(l=>{let I=f.get(O[l.keystat]);N[l.type]===2&&I&&(Z[t.paramtype]===0?l.value+=I:l.value*=1+I/100)})}}else if(o===42){if(((t.params[0]??0)===0||r.skillEffectId===(t.params[0]??0))&&i.id===(t.params[1]??0)){let f=O[t.params[2]??0],l=t.params[3]??0;f&&l!==void 0&&i.passiveoption.push({type:"stat",keystat:f,keyindex:0,value:l})}}else if(o===21&&i.statuseffectvalues&&((t.params[0]??0)===0||r.skillEffectId===(t.params[0]??0))&&i.id===(t.params[1]??0))if((t.params[2]??0)===0)i.statuseffectvalues=t.params.slice(3);else{let f=[];for(let l=0;l<Math.max(i.statuseffectvalues.length,t.params.length-3);l++)t.params[l+3]&&f.push((i.statuseffectvalues[l]??0)*(1+(t.params[l+3]??0)/100));i.statuseffectvalues=f}})}),i}getCritMultiplierFromCombatEffect(a,s){if(!a)return 0;let r=0;return a.effects.filter(i=>i.actions.find(e=>W[e.type]===4)).forEach(i=>{this.#e.isCombatEffectConditionsValid({effect:i,...s})&&i.actions.filter(e=>W[e.type]===4).forEach(e=>{r+=(e.args[0]??0)/100})}),r}applyRdps(a,s,r,i){s&&(s.damageInfo.rdpsDamageGiven+=i),s&&this.#e.isSupportClassId(s.classId)&&(a.damageInfo.rdpsDamageReceivedSupp+=i,r.damageInfo.rdpsDamageReceivedSupp+=i),a.damageInfo.rdpsDamageReceived+=i,r.damageInfo.rdpsDamageReceived+=i}onStartSkill(a,s,r){let i=this.updateEntity(a,{isDead:!1},r);if(i){i.hits.casts+=1;let e=i.skills.get(s);e||(e={...this.createEntitySkill(),id:s,...this.getSkillNameIcon(s,0)},i.skills.set(s,e)),e.hits.casts+=1}}onShieldUsed(a,s,r,i){if(i<0&&console.error("Shield change values was negative, shield ammount increased"),a.entityType===1&&s.entityType===1){if(!this.#t.damageStatistics.effectiveShieldingBuffs.has(r)){let I=this.#e.getStatusEffectHeaderData(r);I&&this.#t.damageStatistics.effectiveShieldingBuffs.set(r,I)}let e=new Date,t=this.updateEntity(a,{},e),o=this.updateEntity(s,{},e);t.damagePreventedByShield+=i;let f=t.damagePreventedByShieldBy.get(r)??0;t.damagePreventedByShieldBy.set(r,f+i),this.#t.damageStatistics.topEffectiveShieldingUsed=Math.max(t.damagePreventedByShield,this.#t.damageStatistics.topEffectiveShieldingUsed),o.damagePreventedWithShieldOnOthers+=i;let l=o.damagePreventedWithShieldOnOthersBy.get(r)??0;o.damagePreventedWithShieldOnOthersBy.set(r,l+i),this.#t.damageStatistics.topEffectiveShieldingDone=Math.max(o.damagePreventedWithShieldOnOthers,this.#t.damageStatistics.topEffectiveShieldingDone),this.#t.damageStatistics.totalEffectiveShieldingDone+=i}}onShieldApplied(a,s,r,i){let e=new Date,t=this.updateEntity(a,{},e),o=this.updateEntity(s,{},e);if(o.isPlayer&&t.isPlayer){if(!this.#t.damageStatistics.appliedShieldingBuffs.has(r)){let I=this.#e.getStatusEffectHeaderData(r);I&&this.#t.damageStatistics.appliedShieldingBuffs.set(r,I)}t.shieldReceived+=i,o.shieldDone+=i;let f=o.shieldDoneBy.get(r)??0;o.shieldDoneBy.set(r,f+i);let l=t.shieldReceivedBy.get(r)??0;t.shieldReceivedBy.set(r,l+i),this.#t.damageStatistics.topShieldDone=Math.max(o.shieldDone,this.#t.damageStatistics.topShieldDone),this.#t.damageStatistics.topShieldGotten=Math.max(t.shieldReceived,this.#t.damageStatistics.topShieldGotten),this.#t.damageStatistics.totalShieldDone+=i}}getSkillNameIcon(a,s){if(a===0&&s===0)return{name:"Bleed",icon:"buff_168.png"};if(a===0){let r=this.#e.skillEffect.get(s);if(r&&r.itemname)return{name:r.itemname,icon:r.icon??""};if(r){if(r.sourceskill?.[0]){let i=this.#e.skill.get(r.sourceskill[0]);if(i)return{name:i.name,icon:i.icon}}else{let i=this.#e.skill.get(Math.floor(s/10));if(i)return{name:i.name,icon:i.icon}}return{name:r.comment}}else return{name:this.#e.getSkillName(a)}}else{let r=this.#e.skill.get(a);return!r&&(r=this.#e.skill.get(a-a%10),!r)?{name:this.#e.getSkillName(a),icon:""}:r.summonsourceskill?.[0]?(r=this.#e.skill.get(r.summonsourceskill[0]),r?{name:r.name+" (Summon)",icon:r.icon}:{name:this.#e.getSkillName(a),icon:""}):r.sourceskill?.[0]?(r=this.#e.skill.get(r.sourceskill[0]),r?{name:r.name,icon:r.icon}:{name:this.#e.getSkillName(a),icon:""}):{name:r.name,icon:r.icon}}}updateEntity(a,s,r){let i={lastUpdate:+r},e=this.#t.entities.get(a.name),t={};if(!e||a.entityType===1&&e.isPlayer!==!0){if(a.entityType===1){let o=a;t={classId:o.class,gearScore:o.gearLevel,isPlayer:!0}}else if(a.entityType===2||a.entityType===3){let o=a;t={npcId:o.typeId,isBoss:o.isBoss}}else if(a.entityType===4){let o=a;t={npcId:o.typeId,isBoss:o.isBoss,isEsther:!0,icon:o.icon}}}return e?Object.assign(e,s,i,t):(e={...this.createEntity(),...s,...i,...t,name:a.name,id:a.entityId.toString(16)},this.#t.entities.set(a.name,e)),e}updateOrCreateEntity(a,s,r){if(!(!s.name||!s.id)){for(let[i,e]of this.#t.entities)if(s.id===e.id){this.#t.entities.delete(i),this.updateEntity(a,{...e,...s},r);return}this.updateEntity(a,s,r)}}createEntitySkill(){return{id:0,name:"",icon:"",damageInfo:{damageDealt:0,rdpsDamageReceived:0,rdpsDamageReceivedSupp:0,rdpsDamageGiven:0,damageDealtDebuffedBySupport:0,damageDealtBuffedBySupport:0},maxDamage:0,hits:{casts:0,total:0,crit:0,backAttack:0,totalBackAttack:0,frontAttack:0,totalFrontAttack:0,counter:0,hitsDebuffedBySupport:0,hitsBuffedBySupport:0,hitsBuffedBy:new Map,hitsDebuffedBy:new Map},breakdown:[],damageDealtDebuffedBy:new Map,damageDealtBuffedBy:new Map}}createEntity(){return{lastUpdate:0,id:"",npcId:0,name:"",classId:0,isBoss:!1,isPlayer:!1,isDead:!1,deaths:0,deathTime:0,gearScore:0,currentHp:0,maxHp:0,damageInfo:{damageDealt:0,rdpsDamageReceived:0,rdpsDamageReceivedSupp:0,rdpsDamageGiven:0,damageDealtDebuffedBySupport:0,damageDealtBuffedBySupport:0},healingDone:0,shieldDone:0,damageTaken:0,skills:new Map,hits:{casts:0,total:0,crit:0,backAttack:0,totalBackAttack:0,frontAttack:0,totalFrontAttack:0,counter:0,hitsDebuffedBySupport:0,hitsBuffedBySupport:0,hitsBuffedBy:new Map,hitsDebuffedBy:new Map},damageDealtDebuffedBy:new Map,damageDealtBuffedBy:new Map,damagePreventedByShieldBy:new Map,damagePreventedWithShieldOnOthersBy:new Map,shieldDoneBy:new Map,shieldReceivedBy:new Map,damagePreventedWithShieldOnOthers:0,damagePreventedByShield:0,shieldReceived:0,statApiValid:!1}}getBroadcast(){let a={...this.#t};return a.entities=new Map,this.#t.entities.forEach((s,r)=>{!s.isPlayer&&!s.isEsther||(s.statApiValid=this.#a||this.#r.isCurrentZoneValid()&&this.#r.cache.get(s.name)?.status===2,a.entities.set(r,{...s}))}),a.localPlayer=this.#s.localPlayer.name,a}resetBreakdowns(){this.#i.clear()}createBreakdownEntity(a){return this.#i.has(a)||this.#i.set(a,new Map),this.#i.get(a)}removeBreakdownEntry(a){this.#i.delete(a)}addBreakdown(a,s,r){let i=this.createBreakdownEntity(a);if(i.has(s))i.get(s).push(r);else{let e=new Array(r);i.set(s,e)}}getBreakdowns(a,s){let r=this.#i.get(a);if(r)return r.get(s)}clearBreakdowns(a,s){let r=this.#i.get(a);r&&r.delete(s)}applyBreakdowns(a,s=!0){a.forEach(r=>{r.skills.forEach(i=>{let e=BigInt("0x"+r.id),t=this.getBreakdowns(e,i.id);t&&(i.breakdown=[...t])})}),s&&this.resetBreakdowns()}setKillState(a){this.#t.killState=a}setZoneLevel(a){this.#t.zoneLevel=F[a]}onSyncDmg(a){this.resetState(+new Date,!1),this.#a=!0,this.#t.lastCombatPacket=+new Date,this.#t.fightStartedOn=this.#t.lastCombatPacket-a.duration,a.table.forEach(s=>{let r={...this.createEntity(),classId:s.typeId<1e3?s.typeId:0,npcId:s.typeId>=1e3?s.typeId:0,isPlayer:s.typeId<1e3,isEsther:s.typeId>=1e3,damageInfo:{damageDealt:s.dealt,rdpsDamageGiven:s.given,rdpsDamageReceived:s.receivedDps+s.receivedSupp,rdpsDamageReceivedSupp:s.receivedSupp,damageDealtBuffedBySupport:0,damageDealtDebuffedBySupport:0},isDead:s.deadDuration>0,deaths:s.deadDuration>0?1:0,deathTime:s.deadDuration>0?this.#t.lastCombatPacket-s.deadDuration:0,hits:{total:1,crit:s.crit/100,backAttack:s.ba/100,totalBackAttack:s.ba>0?1:0,frontAttack:s.fa/100,totalFrontAttack:s.fa>0?1:0,counter:0,hitsDebuffedBySupport:0,hitsBuffedBySupport:0,casts:0,hitsBuffedBy:new Map,hitsDebuffedBy:new Map},id:s.name,name:s.name,lastUpdate:this.#t.lastCombatPacket};if(r.skills.set(0,{...this.createEntitySkill(),icon:"",name:"Uncategorized",id:0,maxDamage:r.damageInfo.damageDealt,damageInfo:r.damageInfo,hits:r.hits}),r.isEsther){let i=this.#e.getNpcEsther(r.npcId);i&&(r.icon=i.icon)}this.#t.entities.set(s.name,r)})}};function dt(S){return{id:S.id,name:S.name,desc:S.desc,icon:S.icon,iconshowtype:S.iconshowtype,duration:S.duration,category:S.category,type:S.type,statuseffectvalues:S.statuseffectvalues?.map(s=>s),buffcategory:S.buffcategory,target:S.target,uniquegroup:S.uniquegroup,overlapFlag:S.overlapFlag,passiveoption:S.passiveoption.map(s=>({keyindex:s.keyindex,keystat:s.keystat,type:s.type,value:s.value})),setname:S.setname,sourceskill:S.sourceskill?.map(s=>s)}}function ut(S){return{id:S.id,effects:S.effects.map(a=>({...a,conditions:a.conditions.map(s=>({...s})),actions:a.actions.map(s=>({...s,args:s.args.map(r=>r)}))}))}}var U=class{characterIdToPartyId;entityIdToPartyId;raidInstanceToPartyInstances;ownName;characterNameToCharacterId;#t;constructor(a){this.characterIdToPartyId=new Map,this.entityIdToPartyId=new Map,this.raidInstanceToPartyInstances=new Map,this.characterNameToCharacterId=new Map,this.#t=a}add(a,s,r=void 0,i=void 0,e=void 0){!r&&!i||(r&&!i&&(i=this.#t.getEntityId(r)),i&&!r&&(r=this.#t.getEntityId(i)),r&&this.characterIdToPartyId.set(r,s),i&&this.entityIdToPartyId.set(i,s),e&&r&&this.characterNameToCharacterId.set(e,r),this.registerPartyId(a,s))}completeEntry(a,s){let r=this.getPartyIdFromCharacterId(a),i=this.getPartyIdFromEntityId(s);r&&i||(!r&&i&&this.characterIdToPartyId.set(a,i),!i&&r&&this.entityIdToPartyId.set(s,r))}changeEntityId(a,s){let r=this.getPartyIdFromEntityId(a);r&&(this.entityIdToPartyId.delete(a),this.entityIdToPartyId.set(s,r))}setOwnName(a){this.ownName=a}remove(a,s){if(s===this.ownName){this.removePartyMappings(a);return}let r=this.characterNameToCharacterId.get(s);if(this.characterNameToCharacterId.delete(s),!r)return;this.characterIdToPartyId.delete(r);let i=this.#t.getEntityId(r);i&&this.entityIdToPartyId.delete(i)}isCharacterInParty(a){return this.characterIdToPartyId.has(a)}isEntityInParty(a){return this.entityIdToPartyId.has(a)}getPartyIdFromCharacterId(a){return this.characterIdToPartyId.get(a)}getPartyIdFromEntityId(a){return this.entityIdToPartyId.get(a)}removePartyMappings(a){let s=this.getRaidInstanceId(a),r=s?this.raidInstanceToPartyInstances.get(s)??new Set([a]):new Set([a]);for(let[i,e]of this.characterIdToPartyId)if(r.has(e)){this.characterIdToPartyId.delete(i);for(let[t,o]of this.characterNameToCharacterId)if(i===o){this.characterNameToCharacterId.delete(t);break}}for(let[i,e]of this.entityIdToPartyId)r.has(e)&&this.entityIdToPartyId.delete(i)}getRaidInstanceId(a){for(let[s,r]of this.raidInstanceToPartyInstances)if(r.has(a))return s}registerPartyId(a,s){let r=this.raidInstanceToPartyInstances.get(a);r||(r=new Set,this.raidInstanceToPartyInstances.set(a,r)),r.add(s)}partyInfo(a,s,r){let i=a.parsed;if(i){if(i.memberDatas.length===1&&i.memberDatas[0]?.name===r.name){this.remove(i.partyInstanceId,i.memberDatas[0].name);return}for(let e of i.memberDatas){e.characterId===r.characterId&&this.setOwnName(e.name);let t=this.#t.getEntityId(e.characterId);if(t){let o=s.get(t);if(o&&o.entityType===1&&o.name!==e.name){let f=o;f.gearLevel=e.gearLevel,f.name=e.name,f.class=e.classId}}this.add(i.raidInstanceId,i.partyInstanceId,e.characterId,t,e.name)}}}clear(a){this.#t.addMapping(a.characterId,a.entityId),this.completeEntry(a.characterId,a.entityId);let s,r;if(a.characterId){let i=this.getPartyIdFromCharacterId(a.characterId);i&&(r=this.getRaidInstanceId(i),s=r?this.raidInstanceToPartyInstances.get(r)??new Set([i]):new Set([i]))}this.characterIdToPartyId=new Map([...this.characterIdToPartyId].filter(([i,e])=>s?.has(e))),this.entityIdToPartyId=new Map([...this.entityIdToPartyId].filter(([i,e])=>s?.has(e))),this.raidInstanceToPartyInstances=new Map([...this.raidInstanceToPartyInstances].filter(([i,e])=>i==r)),this.ownName=a.name,this.characterNameToCharacterId=new Map([...this.characterNameToCharacterId].filter(([i,e])=>this.characterIdToPartyId?.has(e))),this.#t.clear(Array.from(this.characterIdToPartyId.keys()))}};var K=class{entityToCharacterId;characterToEntityId;constructor(){this.entityToCharacterId=new Map,this.characterToEntityId=new Map}addMapping(a,s){this.entityToCharacterId.set(s,a),this.characterToEntityId.set(a,s)}getCharacterId(a){return this.entityToCharacterId.get(a)}getEntityId(a){return this.characterToEntityId.get(a)}clear(a){this.entityToCharacterId=new Map([...this.entityToCharacterId].filter(([s,r])=>a.includes(r))),this.characterToEntityId=new Map([...this.characterToEntityId].filter(([s,r])=>a.includes(s)))}};var st=class extends ht{#t;#s;#o;#r;#e;#a;#i;#n;#l;#c;#f;constructor(a,s,r,i){super(),this.#t=a,this.#s=s,this.#o=new K,this.#r=new U(this.#o),this.#e=new J(this.#r,this.#s,i.isLive??!0),this.#a=new X(this.#o,this.#r,this.#e,this.#s),this.#n=new z(this.#a,r,rt(this.#t,i.isLive)?this.#t:void 0),this.#i=new q(this.#a,this.#e,this.#n,this.#s,i),this.#i.emit=this.emit.bind(this),this.#c=!1,this.#f=!1,this.#i.options.isLive&&(this.#l=setInterval(this.broadcastStateChange.bind(this),this.#i.options.broadcastInterval)),this.#t.on("syncDmg",e=>{this.#i.onSyncDmg(e)}).on("APP_StatApi",e=>{let t=e.parsed;t&&this.#n.updatePlayerStats(t.players)}).on("AbilityChangeNotify",e=>{}).on("ActiveAbilityNotify",e=>{}).on("AddonSkillFeatureChangeNotify",e=>{}).on("BlockSkillStateNotify",e=>{}).on("CounterAttackNotify",e=>{let t=e.parsed;if(!t)return;let o=this.#a.entities.get(t.sourceId);o&&this.#i.onCounterAttack(o,e.time)}).on("DeathNotify",e=>{let t=e.parsed;if(!t)return;let o=this.#a.entities.get(t.targetId);o&&this.#i.onDeath(o,e.time)}).on("EquipChangeNotify",e=>{let t=e.parsed;if(!t)return;let o=this.#a.entities.get(t.objectId);!o||o.entityType!==1||(o.itemSet=this.#a.getPlayerSetOptions(t.equipItemDataList),o.items.equipList.clear(),t.equipItemDataList.forEach(f=>{f.id!==void 0&&f.slot!==void 0&&o.items.equipList.set(f.slot,f.id)}))}).on("EquipLifeToolChangeNotify",e=>{let t=e.parsed;if(!t)return;let o=this.#a.entities.get(t.objectId);!o||o.entityType!==1||(o.items.lifeToolList.clear(),t.equipLifeToolDataList.forEach(f=>{f.id!==void 0&&f.slot!==void 0&&o.items.lifeToolList.set(f.slot,f.id)}))}).on("IdentityStanceChangeNotify",e=>{let t=e.parsed;if(!t)return;let o=this.#a.entities.get(t.objectId);o&&o.entityType===1&&(o.stance=t.stance)}).on("IdentityGaugeChangeNotify",e=>{}).on("InitAbility",e=>{}).on("InitEnv",e=>{this.#a.processInitEnv(e),this.#i.onInitEnv(e,e.time),this.#n.cache.clear()}).on("InitLocal",e=>{}).on("InitPC",e=>{let t=this.#a.processInitPC(e);if(t&&e.parsed){let o=this.#s.getStatPairMap(e.parsed.statPair);this.#i.updateOrCreateEntity(t,{id:t.entityId.toString(16),name:t.name,classId:t.class,isPlayer:!0,gearScore:t.gearLevel,currentHp:Number(o.get(1))||0,maxHp:Number(o.get(27))||0},e.time)}}).on("InitItem",e=>{let t=e.parsed;t&&([1,20].includes(t.storageType)?(1===t.storageType&&(this.#a.localPlayer.itemSet=this.#a.getPlayerSetOptions(t.itemDataList)),t.itemDataList.forEach(o=>{o.id!==void 0&&o.slot!==void 0&&this.#a.localPlayer.items.equipList.set(o.slot,o.id)})):t.storageType===21&&t.itemDataList.forEach(o=>{o.id!==void 0&&o.slot!==void 0&&this.#a.localPlayer.items.lifeToolList.set(o.slot,o.id)}))}).on("MigrationExecute",e=>{this.#n.zoneSyncStatus=0;let t=e.parsed;t&&(this.#a.localPlayer.characterId===0n&&(this.#a.localPlayer.characterId=t.account_CharacterId1<t.account_CharacterId2?t.account_CharacterId1:t.account_CharacterId2),this.#n.ip=e.parsed.serverAddr.split(":")[0])}).on("NewNpc",e=>{let t=this.#a.processNewNpc(e);if(t&&e.parsed){let o=this.#s.getStatPairMap(e.parsed.npcStruct.statPair);this.#i.updateOrCreateEntity(t,{id:t.entityId.toString(16),name:t.name,npcId:t.typeId,isPlayer:!1,isBoss:t.isBoss,currentHp:Number(o.get(1))||0,maxHp:Number(o.get(27))||0},e.time)}}).on("NewNpcSummon",e=>{let t=this.#a.processNewNpcSummon(e);if(t&&e.parsed){let o=this.#s.getStatPairMap(e.parsed.npcData.statPair);this.#i.updateOrCreateEntity(t,{id:t.entityId.toString(16),name:t.name,npcId:t.typeId,isPlayer:!1,isBoss:t.isBoss,currentHp:Number(o.get(1))||0,maxHp:Number(o.get(27))||0},e.time)}}).on("NewPC",e=>{let t=this.#a.processNewPC(e);if(t&&e.parsed){let o=this.#s.getStatPairMap(e.parsed.pcStruct.statPair);this.#i.updateOrCreateEntity(t,{id:t.entityId.toString(16),name:t.name,classId:t.class,isPlayer:!0,gearScore:t.gearLevel,currentHp:Number(o.get(1))||0,maxHp:Number(o.get(27))||0},e.time)}}).on("NewProjectile",e=>{let t=e.parsed;if(!t)return;let o={entityId:t.projectileInfo.projectileId,entityType:5,name:t.projectileInfo.projectileId.toString(16),ownerId:t.projectileInfo.ownerId,skillEffectId:t.projectileInfo.skillEffect,skillId:t.projectileInfo.skillId,stats:new Map};this.#a.entities.set(o.entityId,o)}).on("NewTrap",e=>{let t=e.parsed;if(!t)return;let o={entityId:t.trapData.objectId,entityType:5,name:t.trapData.objectId.toString(16),ownerId:t.trapData.ownerId,skillEffectId:t.trapData.skillEffect,skillId:t.trapData.skillId,stats:new Map};this.#a.entities.set(o.entityId,o)}).on("ParalyzationStateNotify",e=>{}).on("PartyInfo",e=>{this.#r.partyInfo(e,this.#a.entities,this.#a.localPlayer)}).on("PartyLeaveResult",e=>{let t=e.parsed;t&&this.#r.remove(t.partyInstanceId,t.name)}).on("PartyPassiveStatusEffectAddNotify",e=>{}).on("PartyPassiveStatusEffectRemoveNotify",e=>{}).on("PartyStatusEffectAddNotify",e=>{let t=e.parsed;if(t)for(let o of t.statusEffectDatas){let f=t.playerIdOnRefresh!==0n?t.playerIdOnRefresh:o.sourceId,l=this.#a.getSourceEntity(f);this.#e.RegisterStatusEffect(this.#e.buildStatusEffect(o,t.characterId,l.entityId,0,e.time))}}).on("PartyStatusEffectRemoveNotify",e=>{let t=e.parsed;if(t)for(let o of t.statusEffectIds){let f=this.#e.RemoveStatusEffect(t.characterId,o,0,t.reason,e.time)}}).on("PartyStatusEffectResultNotify",e=>{let t=e.parsed;t&&this.#r.add(t.raidInstanceId,t.partyInstanceId,t.characterId)}).on("PassiveStatusEffectAddNotify",e=>{}).on("PassiveStatusEffectRemoveNotify",e=>{}).on("RaidBegin",e=>{let t=e.parsed;t&&(this.#s.statQueryFilter.raid.has(t.raidId)?this.#n.zoneSyncStatus|=16:this.#n.zoneSyncStatus|=8)}).on("ZoneMemberLoadStatusNotify",e=>{let t=e.parsed;t&&(this.#i.setZoneLevel(t.zoneLevel),this.#s.statQueryFilter.zone.has(t.zoneId)&&[0,1,5].includes(t.zoneLevel)?this.#n.zoneSyncStatus|=4:this.#n.zoneSyncStatus|=2)}).on("RaidBossKillNotify",e=>{this.#i.setKillState(1),this.#i.onPhaseTransition(1,e.time)}).on("RaidResult",e=>{e.parsed?.raidResult===1&&this.#i.setKillState(1),this.#i.onPhaseTransition(0,e.time)}).on("RemoveObject",e=>{let t=e.parsed;if(t)for(let o of t.unpublishedObjects)this.#e.RemoveLocalObject(o.objectId,e.time)}).on("SkillCastNotify",e=>{let t=e.parsed;if(!t)return;let o=this.#a.getSourceEntity(t.caster);o=this.#a.guessIsPlayer(o,t.skillId),this.#i.onStartSkill(o,t.skillId,e.time)}).on("SkillDamageAbnormalMoveNotify",e=>{let t=e.parsed;if(!t)return;let o=this.#a.getSourceEntity(t.sourceId);t.skillDamageAbnormalMoveEvents.forEach(f=>{let l=this.#a.getOrCreateEntity(f.skillDamageEvent.targetId),I=this.#a.getOrCreateEntity(t.sourceId);l.stats.set(1,f.skillDamageEvent.curHp),l.stats.set(27,f.skillDamageEvent.maxHp),this.#i.onDamage(o,I,l,{skillId:t.skillId,skillEffectId:t.skillEffectId,damage:Number(f.skillDamageEvent.damage),modifier:f.skillDamageEvent.modifier,targetCurHp:Number(f.skillDamageEvent.curHp),targetMaxHp:Number(f.skillDamageEvent.maxHp),damageAttr:f.skillDamageEvent.damageAttr??0,damageType:f.skillDamageEvent.damageType},t.skillDamageAbnormalMoveEvents.length,e.time)})}).on("SkillDamageNotify",e=>{let t=e.parsed;if(!t)return;let o=this.#a.getSourceEntity(t.sourceId);t.skillDamageEvents.forEach(f=>{let l=this.#a.getOrCreateEntity(f.targetId),I=this.#a.getOrCreateEntity(t.sourceId);this.#i.onDamage(o,I,l,{skillId:t.skillId,skillEffectId:t.skillEffectId??0,damage:Number(f.damage),modifier:f.modifier,targetCurHp:Number(f.curHp),targetMaxHp:Number(f.maxHp),damageAttr:f.damageAttr??0,damageType:f.damageType},t.skillDamageEvents.length,e.time)})}).on("SkillStageNotify",e=>{}).on("SkillStartNotify",e=>{let t=e.parsed;if(!t)return;let o=this.#a.getSourceEntity(t.sourceId);if(o=this.#a.guessIsPlayer(o,t.skillId),o.entityType===1){let f=o,l=f.skills.get(t.skillId);if(l||(l={effects:new Set,tripods:new Map},f.skills.set(t.skillId,l)),l.level=t.skillLevel,t.skillOptionData.tripodIndex&&t.skillOptionData.tripodLevel){l.tripods||(l.tripods=new Map);for(let[I,R]of["first","second","third"].entries()){if(t.skillOptionData.tripodIndex[R]===0){for(let v=1;v<=3;v++)l.tripods.delete(3*I+v);continue}let y=3*I+t.skillOptionData.tripodIndex[R],x=t.skillOptionData.tripodLevel[R],B=l.tripods.get(y);if(B&&x===B.level)continue;for(let v=1;v<=3;v++)l.tripods.delete(3*I+v);let w=this.#s.skillFeature.get(t.skillId)?.get(y),_=[];w&&w.entries.forEach(v=>{v.level!==0&&v.level!==x||_.push(v)}),l.tripods.set(y,{level:t.skillOptionData.tripodLevel[R],options:_.sort((v,H)=>H.level-v.level)})}}}this.#i.onStartSkill(o,t.skillId,e.time)}).on("StatusEffectAddNotify",e=>{let t=e.parsed;if(!t)return;let o=this.#a.getSourceEntity(t.statusEffectData.sourceId);this.#e.RegisterStatusEffect(this.#e.buildStatusEffect(t.statusEffectData,t.objectId,o.entityId,1,e.time))}).on("StatusEffectDurationNotify",e=>{let t=e.parsed;t&&this.#e.UpdateDuration(t.effectInstanceId,t.targetId,t.expirationTick,1)}).on("StatusEffectRemoveNotify",e=>{let t=e.parsed;if(t)for(let o of t.statusEffectIds){let f=this.#e.RemoveStatusEffect(t.objectId,o,1,t.reason,e.time)}}).on("StatusEffectSyncDataNotify",e=>{let t=e.parsed;t&&this.#e.SyncStatusEffect(t.effectInstanceId,t.characterId,t.objectId,t.value,this.#a.localPlayer.characterId)}).on("TriggerBossBattleStatus",e=>{this.#i.onPhaseTransition(2,e.time)}).on("TriggerFinishNotify",e=>{}).on("TriggerStartNotify",e=>{let t=e.parsed;if(t)switch(t.triggerSignalType){case 57:case 59:case 61:case 63:case 74:case 76:this.#i.setKillState(1);break;case 58:case 60:case 62:case 64:case 75:case 77:this.#i.setKillState(0);break;case 27:case 10:case 11:break}}).on("TroopMemberUpdateMinNotify",e=>{}).on("ZoneObjectUnpublishNotify",e=>{let t=e.parsed;t&&this.#e.RemoveLocalObject(t.objectId,e.time)}).on("ZoneStatusEffectAddNotify",e=>{}).on("TroopMemberUpdateMinNotify",e=>{let t=e.parsed;if(t&&t.statusEffectDatas.length>0)for(let o of t.statusEffectDatas){let f=this.#o.getEntityId(t.characterId),l=o.value?o.value.readUInt32LE():0,I=o.value?o.value.readUInt32LE(8):0,R=l<I?l:I;this.#e.SyncStatusEffect(o.effectInstanceId,t.characterId,f,R,this.#a.localPlayer.characterId)}}).on("ZoneStatusEffectRemoveNotify",e=>{}),this.#e.on("shieldApplied",e=>{let t=e.targetId;if(e.type===0&&(t=this.#o.getEntityId(e.targetId)??t),t===void 0)return;let o=this.#a.getSourceEntity(e.sourceId),f=this.#a.getOrCreateEntity(t);this.#i.onShieldApplied(f,o,e.statusEffectId,e.value)}).on("shieldChanged",(e,t,o)=>{let f=e.targetId;if(e.type===0&&(f=this.#o.getEntityId(e.targetId)??f),f===void 0)return;let l=this.#a.getSourceEntity(e.sourceId),I=this.#a.getOrCreateEntity(f);this.#i.onShieldUsed(I,l,e.statusEffectId,t-o)})}broadcastStateChange(){this.emit("state-change",this.#i.getBroadcast())}reset(){this.#i.resetState(+new Date)}cancelReset(){this.#i.cancelReset()}updateOptions(a){this.#l&&a.broadcastInterval&&a.broadcastInterval!==this.#i.options.broadcastInterval&&(clearInterval(this.#l),this.#l=setInterval(this.broadcastStateChange.bind(this),this.#i.options.broadcastInterval)),this.#i.updateOptions(a)}onConnect(a){this.#n.ip||(this.#n.ip=a.split(":")[0],rt(this.#t,this.#i.options.isLive)&&this.#t.appendLog(new et({account_CharacterId1:0n,serverAddr:a,account_CharacterId2:0n},11,tt)))}get encounters(){return this.#i.splitEncounter(new Date),this.#i.encounters}};function rt(S,a){return S instanceof at||S.appendLog&&a}export{st as Parser};
